{
	"info": {
		"_postman_id": "f6121a76-5014-4b4f-97bc-95599148740c",
		"name": "Write Responses To File",
		"description": "This collection makes it easy for users who want to write the response of each request to a file.\nThis can be extended to write anything for eg. meta information or value of variables being used.\n\n\nThis project is using a powerful feature built in postman called as `pm.sendRequest`, the docs for which can be found here: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference#pmsendrequest\n\n\n## Requirements\nTo work with this script, a local server is required.\nYou can choose to write your own local server or edit the one provided below as per your needs.\n\n## Steps To Use\n1. Put all the requests you want to write the responses for, under this collection.\n \n2. Clone the following repository to your machine - https://github.com/sivcan/ResponseToFile-Postman or use the following command - `git clone https://github.com/sivcan/ResponseToFile-Postman`\n\n3. Navigate into the directory and install the dependencies. Use the following command: `npm i` \n\n4. Run the local server. Use the following command: `node script.js`\n\n5. Now, the responses for every request which is a part of this collection will be written to the `Responses` folder inside the project repo.\nYou can modify the local server's code to change the file location.\n\n5. Run your requests through builder / run through collection runner and store your data locally. \n\n\nYou can modify the script and the local server to support more data formats / data that you want to write to the file.\n\n## Additionally\nInstead of moving each request under this collection, you can copy the script from the `Tests` tab of this collection to the `Tests` tab of any request or even a specific folder.\n\n**Note:** To access the `Tests` script of this collection:\n1. You need to `Right Click` the `Write Responses To File` collection in the sidebar.\n2. Click on `Edit`\n3. Go to `Tests` tab.\n\nThen you can send that particular request / requests under a folder for which the data needs to be written.\n\n## File Extensions\nYou can also modify the **extension** of the file.\n\n**Example:**\nIncase you want to write CSV data to a file, all you need to do is change the `fileExtension` property in the `Tests` script to `csv`.\n\n## File Support\nModify the `opts` variable as per your need under the `Tests` tab of the collection, the following features are supported:\n\n1. If you want all the data to be written to a single file then you can modify the value of `mode` to `appendFile` instead of `writeFile` (More functions here: [Node FS](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback))\n2. If you want each response to be stored in a different file, then you can provide a uniqueIdentifier such as `Date.now()` or some environment variable as a counter, and it'll be used generate unique file names. You can also make the value of `uniqueIdentifier` as `true` and the server will internally append a unique number to every file name.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "to",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"starting next iteration\");\r",
							"pm.collectionVariables.set(\"txt\", pm.info.iteration + 1);\r",
							"console.log(\"current number: \" + pm.collectionVariables.get(\"txt\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.text();\r",
							"let currentId;\r",
							"if (response.length > 50) {\r",
							"    try {\r",
							"        currentId = parseInt(response.match(/id:[0-9]+/mg)[1].split(':')[1]);\r",
							"    } catch {\r",
							"        currentId = parseInt((response.match(/id:[0-9]+/m) + '').split(':')[1]);\r",
							"        console.log(\"route is one-way\");\r",
							"    }\r",
							"\r",
							"    pm.collectionVariables.set(\"id\", currentId);\r",
							"    console.log(\"current id: \" + pm.collectionVariables.get(\"id\"));\r",
							"} else {\r",
							"    console.log(\"response length too short\");\r",
							"    pm.collectionVariables.set(\"id\", 0);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Accept",
						"value": "*/*"
					},
					{
						"key": "DNT",
						"value": "1"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 OPR/76.0.4017.107"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Origin",
						"value": "http://tm.ge"
					},
					{
						"key": "Referer",
						"value": "http://tm.ge/routes/scheme.php?lang=1"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "Cookie",
						"value": "PHPSESSID=vgb9c87sis980d24q33os0t0l0"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "dir",
							"value": "1",
							"type": "text"
						},
						{
							"key": "t",
							"value": "0",
							"type": "text"
						},
						{
							"key": "lang",
							"value": "{{lang}}",
							"type": "text"
						},
						{
							"key": "txt",
							"value": "{{txt}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://tm.ge/routes/scheme_all.php",
					"protocol": "http",
					"host": [
						"tm",
						"ge"
					],
					"path": [
						"routes",
						"scheme_all.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "from",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Accept",
						"value": "*/*"
					},
					{
						"key": "DNT",
						"value": "1"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 OPR/76.0.4017.107"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Origin",
						"value": "http://tm.ge"
					},
					{
						"key": "Referer",
						"value": "http://tm.ge/routes/scheme.php?lang=1"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "Cookie",
						"value": "PHPSESSID=vgb9c87sis980d24q33os0t0l0"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "dir",
							"value": "1.1",
							"type": "text"
						},
						{
							"key": "t",
							"value": "0",
							"type": "text"
						},
						{
							"key": "lang",
							"value": "{{lang}}",
							"type": "text"
						},
						{
							"key": "id",
							"value": "{{id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://tm.ge/routes/scheme_all.php",
					"protocol": "http",
					"host": [
						"tm",
						"ge"
					],
					"path": [
						"routes",
						"scheme_all.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// The opts for the server, also includes the data to be written to file",
					"let opts = {",
					"    requestName: request.name || request.url,",
					"    fileExtension: 'json',",
					"    mode: 'writeFile', // Change this to any function of the fs library of node to use it.",
					"    uniqueIdentifier: false,",
					"    number: pm.collectionVariables.get(\"txt\") + \"_eng\",",
					"    responseData: pm.response.text()",
					"};",
					"",
					"pm.sendRequest({",
					"    url: 'http://localhost:3000/write',",
					"    method: 'POST',",
					"    header: 'Content-Type:application/json',",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify(opts)",
					"    }",
					"}, function (err, res) {",
					"    console.log(res);",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "0"
		},
		{
			"key": "txt",
			"value": "1"
		},
		{
			"key": "lang",
			"value": "1"
		}
	]
}